
module  reset_proof (
    clk,
    pc,
//    data_addr,
//    data_en,
    //pc_en,

    reset,
);

input		clk;
input   [15:0]  pc;
output          reset;

// MACROS ///////////////////////////////////////////
parameter LAST_RESET_ADDR = 16'hFEFF;
parameter RESET_HANDLER = 16'hfffe;
parameter RUN  = 1'b0, KILL = 1'b1;
/////////////////////////////////////////////////////

//-------------Internal Variables---------------------------
reg             state;
reg             reset_out;
//



initial
    begin
        state = KILL;
        res = 1'b1;
    end

wire is_reset_time = pc == LAST_RESET_ADDR;

always @(posedge clk)
if( state == RUN && is_reset_time) 
    state <= KILL;
else if (state == KILL && pc == RESET_HANDLER)
    state <= RUN;
else state <= state;

always @(posedge clk)
if (state == RUN && is_reset_time)
    reset_out <= 1'b1;
else if (state == KILL)
    reset_out <= 1'b1;
else reset_out <= 1'b0;

assign reset = reset_out;

endmodule
